{"version":3,"sources":["components/JobBoardComponent.js","App.js","serviceWorker.js","index.js"],"names":["JobBoardComponent","props","tags","job","role","level","languages","push","tools","className","featured","src","logo","alt","company","new","position","postedAt","contract","location","map","tag","onClick","filterJobsHandler","key","App","useState","jobs","setJobs","filters","setFilters","useEffect","data","filteredJobs","filter","length","every","includes","passedFilter","f","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8/FA6DeA,EA3DW,SAACC,GACzB,IAAMC,EAAO,CAACD,EAAME,IAAIC,KAAMH,EAAME,IAAIE,OAOxC,OANIJ,EAAME,IAAIG,WACZJ,EAAKK,KAAL,MAAAL,EAAI,YAASD,EAAME,IAAIG,YAErBL,EAAME,IAAIK,OACZN,EAAKK,KAAL,MAAAL,EAAI,YAASD,EAAME,IAAIK,QAGvB,yBAAKC,UAAU,gGACZR,EAAME,IAAIO,SACT,yBAAKD,UAAU,6EAEf,yBAAKA,UAAU,0EAEjB,6BACE,yBACEA,UAAU,4BACVE,IAAKV,EAAME,IAAIS,KACfC,IAAKZ,EAAME,IAAIW,WAGnB,yBAAKL,UAAU,sCACb,wBAAIA,UAAU,2BACXR,EAAME,IAAIW,QACVb,EAAME,IAAIY,KACT,0BAAMN,UAAU,0EAAhB,OAIDR,EAAME,IAAIO,UACT,0BAAMD,UAAU,uEAAhB,aAMJ,wBAAIA,UAAU,qBAAqBR,EAAME,IAAIa,UAC7C,uBAAGP,UAAU,iBACVR,EAAME,IAAIc,SADb,SAC0BhB,EAAME,IAAIe,SADpC,SACiDjB,EAAME,IAAIgB,WAG7D,yBAAKV,UAAU,+HACZP,EAAKkB,KAAI,SAACC,GACT,OACE,0BACEC,QAAS,kBAAMrB,EAAMsB,kBAAkBF,IACvCZ,UAAU,uFACVe,IAAKH,GAEJA,SC2BAI,MA3Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIbC,qBAAU,kBAAMH,EAAQI,KAAO,IAE/B,IAAMC,EAAeN,EAAKO,QAAO,YAAwC,IAArC9B,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAAOG,EAAuB,EAAvBA,MAAOF,EAAgB,EAAhBA,UACtD,GAAuB,IAAnBuB,EAAQM,OACV,OAAO,EAET,IAAMjC,EAAO,CAACE,EAAMC,GASpB,OAPIG,GACFN,EAAKK,KAAL,MAAAL,EAAI,YAASM,IAGXF,GACFJ,EAAKK,KAAL,MAAAL,EAAI,YAASI,IAERuB,EAAQO,OAAM,SAACF,GAAD,OAAYhC,EAAKmC,SAASH,SAG3CX,EAAoB,SAACF,GACrBQ,EAAQQ,SAAShB,IACrBS,EAAW,GAAD,mBAAKD,GAAL,CAAcR,MAQ1B,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,qBAChB,yBAAKE,IAAI,iCAAiCE,IAAI,gBAEhD,yBAAKJ,UAAU,oBACZoB,EAAQM,OAAS,GAChB,yBAAK1B,UAAU,kDACZoB,EAAQT,KAAI,SAACc,GAAD,OACX,0BACEZ,QAAS,kBAhBMgB,EAgBoBJ,OAf/CJ,EAAWD,EAAQK,QAAO,SAACK,GAAD,OAAOA,IAAMD,MADb,IAACA,GAiBf7B,UAAU,uGAFZ,KAIKyB,MAGP,4BACEzB,UAAU,kCACVa,QArBe,WACzBQ,EAAW,MAkBH,UASa,IAAhBH,EAAKQ,OACJ,qDAEAF,EAAab,KAAI,SAACjB,GAChB,OACE,kBAAC,EAAD,CACEA,IAAKA,EACLqB,IAAKrB,EAAIqC,GACTjB,kBAAmBA,UCzDfkB,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4522eff8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst JobBoardComponent = (props) => {\r\n  const tags = [props.job.role, props.job.level];\r\n  if (props.job.languages) {\r\n    tags.push(...props.job.languages);\r\n  }\r\n  if (props.job.tools) {\r\n    tags.push(...props.job.tools);\r\n  }\r\n  return (\r\n    <div className=\"flex flex-col bg-white p-4 m-2 shadow-lg rounded-lg relative my-16 mx-10 lg:flex-row lg:my-4\">\r\n      {props.job.featured ? (\r\n        <div className=\"bg-gray-900 w-2 h-full top-0 left-0 absolute rounded-tl-lg rounded-bl-lg\"></div>\r\n      ) : (\r\n        <div className=\"bg-white w-2 h-full top-0 left-0 absolute rounded-tl-lg rounded-bl-lg\"></div>\r\n      )}\r\n      <div>\r\n        <img\r\n          className=\"w-20 h-20 -mt-12 lg:mt-0 \"\r\n          src={props.job.logo}\r\n          alt={props.job.company}\r\n        ></img>\r\n      </div>\r\n      <div className=\"ml-4 flex flex-col justify-between\">\r\n        <h3 className=\"font-bold text-teal-500\">\r\n          {props.job.company}\r\n          {props.job.new && (\r\n            <span className=\"bg-teal-500 text-teal-100 m-2 font-bold py-1 px-2 rounded-full text-sm\">\r\n              NEW\r\n            </span>\r\n          )}\r\n          {props.job.featured && (\r\n            <span className=\"bg-gray-800 text-white m-2 font-bold py-1 px-2 rounded-full text-sm\">\r\n              FEATURED\r\n            </span>\r\n          )}\r\n        </h3>\r\n\r\n        <h2 className=\"font-bold text-xl\">{props.job.position}</h2>\r\n        <p className=\"text-gray-700\">\r\n          {props.job.postedAt} · {props.job.contract} · {props.job.location}\r\n        </p>\r\n      </div>\r\n      <div className=\"flex items-center mt-4 ml-4 pt-4 border-t-2 border-gray-500 border-solid flex-wrap lg:ml-auto lg:border-t-0 lg:mt-0 lg:pt-0\">\r\n        {tags.map((tag) => {\r\n          return (\r\n            <span\r\n              onClick={() => props.filterJobsHandler(tag)}\r\n              className=\"text-teal-500  bg-teal-100 font-bold mr-4 mb-4 p-2 rounded-lg cursor-pointer lg:mb-0\"\r\n              key={tag}\r\n            >\r\n              {tag}\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobBoardComponent;\r\n","import React, { useState, useEffect } from \"react\";\nimport data from \"./assets/data.json\";\nimport JobBoardComponent from \"./components/JobBoardComponent\";\n\nfunction App() {\n  const [jobs, setJobs] = useState([]);\n  const [filters, setFilters] = useState([]);\n\n  useEffect(() => setJobs(data), []);\n\n  const filteredJobs = jobs.filter(({ role, level, tools, languages }) => {\n    if (filters.length === 0) {\n      return true;\n    }\n    const tags = [role, level];\n\n    if (tools) {\n      tags.push(...tools);\n    }\n\n    if (languages) {\n      tags.push(...languages);\n    }\n    return filters.every((filter) => tags.includes(filter));\n  });\n\n  const filterJobsHandler = (tag) => {\n    if (filters.includes(tag)) return;\n    setFilters([...filters, tag]);\n  };\n  const filterRemoveHandler = (passedFilter) => {\n    setFilters(filters.filter((f) => f !== passedFilter));\n  };\n  const clearFilterHandler = () => {\n    setFilters([]);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"bg-teal-500 mb-12\">\n        <img src=\"./images/bg-header-desktop.svg\" alt=\"background\" />\n      </header>\n      <div className=\"container m-auto\">\n        {filters.length > 0 && (\n          <div className=\"bg-white flex p-6 my-6 mx-10 shadow-md rounded\">\n            {filters.map((filter) => (\n              <span\n                onClick={() => filterRemoveHandler(filter)}\n                className=\"text-teal-500  bg-teal-100 font-bold mr-4 mb-4 p-2 rounded-lg cursor-pointer cursor-pointer lg:mb-0\"\n              >\n                x {filter}\n              </span>\n            ))}\n            <button\n              className=\"font-bold text-gray-600 ml-auto\"\n              onClick={clearFilterHandler}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n\n        {jobs.length === 0 ? (\n          <p>Jobs are being fetched</p>\n        ) : (\n          filteredJobs.map((job) => {\n            return (\n              <JobBoardComponent\n                job={job}\n                key={job.id}\n                filterJobsHandler={filterJobsHandler}\n              />\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}